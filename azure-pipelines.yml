# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- admin/azure-pipelines

pool:
  vmImage: macOS-11

variables:
  SRC_XCODE_FOLDER: $(Build.SourcesDirectory)/src/xcode
  DERIVED_DATA_FOLDER: $(Build.SourcesDirectory)/src/xcode/DerivedData
  TEST_OUTPUT_FOLDER: $(Build.SourcesDirectory)/src/xcode/fastlane/test_output
  SCREENSHOTS_FOLDER: $(Build.SourcesDirectory)/src/xcode/screenshots

parameters:
  - name: snapshotConfig
    type: object
    default:
    - id: 'deDEDark'
      language: 'de-DE'
      displaymode: 'dark'
    - id: 'enENDark'
      language: 'en-EN'
      displaymode: 'dark'
    - id: 'enENLight'
      language: 'en-EN'
      displaymode: 'light'
    - id: 'deDELight'
      language: 'de-DE'
      displaymode: 'light'

jobs:

- job: 'BuildForTesting'
  displayName: ' Build for Testing'
  steps:

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      cd src/xcode && bundle exec fastlane build_for_testing
    displayName: 'Build for Testing'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(DERIVED_DATA_FOLDER)'
      includeRootFolder: true
      archiveType: 'tar'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-DerivedData.tgz'
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-DerivedData.tgz'
      artifact: 'derivedData'
      publishLocation: 'pipeline'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(TEST_OUTPUT_FOLDER)
      artifact: 'testOutput'
      publishLocation: 'pipeline'

- job: 'testAllTests'
  dependsOn: 'BuildForTesting'
  displayName: 'Test - All Tests'
  steps:

  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'testOutput'
      targetPath: $(TEST_OUTPUT_FOLDER)

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'derivedData'
      targetPath: $(SRC_XCODE_FOLDER)

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.SourcesDirectory)/src/xcode/$(Build.BuildId)-DerivedData.tgz'
      destinationFolder: '$(Build.SourcesDirectory)/src/xcode'
      cleanDestinationFolder: false
      overwriteExistingFiles: true

  - task: DeleteFiles@1
    inputs:
      SourceFolder: 
      Contents: '$(Build.SourcesDirectory)/src/xcode/$(Build.BuildId)-DerivedData.tgz'
      RemoveDotFiles: true

  - script: |
      cd src/xcode && bundle exec fastlane test_without_building testplan:AllTests
    displayName: 'test-AllTests'

- job: 'CommunityBuild'
  displayName: 'Community Build'

  steps:
    - script: |
        cd src/xcode && bundle install --jobs=8
      displayName: 'Install Dependencies'

    - script: |
        cd src/xcode 
        bundle exec fastlane build_community
      displayName: 'Community Build'

- job: 'Swiftlint'
  displayName: ' Run Swift Lint'
  steps:
  - script: |
      cd src/xcode && bundle install --jobs=8
    displayName: 'Install Dependencies'

  - script: |
      cd src/xcode
      bundle exec fastlane lint
    displayName: 'Run Swift Lint'

- ${{ each config in parameters.snapshotConfig }}:
  - job: Snapshot${{config.id}}
    displayName: 'Snapshot ${{ config.language }} ${{ config.displaymode }}'
    dependsOn: 'BuildForTesting'

    steps:
      - script: |
          cd src/xcode && bundle install --jobs=8
        displayName: 'Install Dependencies'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'testOutput'
          targetPath: $(TEST_OUTPUT_FOLDER)

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'derivedData'
          targetPath: $(SRC_XCODE_FOLDER)

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '$(Build.SourcesDirectory)/src/xcode/$(Build.BuildId)-DerivedData.tgz'
          destinationFolder: '$(Build.SourcesDirectory)/src/xcode'
          cleanDestinationFolder: false
          overwriteExistingFiles: true

      - task: DeleteFiles@1
        inputs:
          SourceFolder: 
          Contents: '$(Build.SourcesDirectory)/src/xcode/$(Build.BuildId)-DerivedData.tgz'
          RemoveDotFiles: true

      - script: |
          cd src/xcode
          bundle exec fastlane screenshot languages:${{config.language}} mode:${{config.displaymode}}
        displayName: 'Snapshot ${{config.language}} ${{config.displaymode}}'

      - script: |
          cd src/xcode/screenshots/screenshots-${{config.language}}-${{config.displaymode}}
          ls -la
          rm -r test_output
          ls -la
        displayName: 'Remove test_output folder'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(SCREENSHOTS_FOLDER)
          artifact: 'screenshots-${{config.language}}-${{config.displaymode}}'
          publishLocation: 'pipeline'

- job: 'CollectSnapshots'
  displayName: 'Collect Snapshots'
  dependsOn: 
  - ${{ each config in parameters.snapshotConfig }}:
    -  Snapshot${{config.id}}
  
  steps:
  - ${{ each config in parameters.snapshotConfig }}:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'screenshots-${{ config.language }}-${{ config.displaymode }}'
        targetPath: $(Pipeline.Workspace)/screenshots
  
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Pipeline.Workspace)/screenshots'
      includeRootFolder: false
      archiveType: 'tar'
      archiveFile: '$(Build.ArtifactStagingDirectory)/screenshots.tar.gz'
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/screenshots.tar.gz'
      artifact: 'Screenshots Archive'
      publishLocation: 'pipeline'

